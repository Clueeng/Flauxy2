package uwu.noctura.module.impl.exploit;

import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.network.Packet;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.client.C00PacketServerQuery;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import uwu.noctura.event.Event;
import uwu.noctura.event.EventDirection;
import uwu.noctura.event.EventType;
import uwu.noctura.event.impl.*;
import uwu.noctura.module.Category;
import uwu.noctura.module.Module;
import uwu.noctura.module.ModuleInfo;
import uwu.noctura.module.setting.impl.ModeSetting;
import uwu.noctura.utils.*;
import uwu.noctura.utils.timer.Timer;

import java.util.*;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {
    private ModeSetting mode = new ModeSetting("Mode", "Dev", "Dev", "Universo Craft", "StelAC FlyB", "Karhu", "BlocksMC", "Hypixel");


    private HashMap<Packet, Long> pingSpoofPackets = new HashMap<>();
    private ArrayList<Packet> blinkPackets = new ArrayList<>();
    private Timer timer = new Timer();
    private long lastTransaction;;
    public int tick, consumeTick;
    LinkedList<Packet> packetBuffer = new LinkedList<>();

    public Disabler() {
        this.addSettings(mode);
    }

    @Override
    public void onEnable() {
        kick = false;
        timer.reset();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();

    }
    boolean kick;


    public void onEvent(Event event) {
        switch (mode.getMode()){
            case "Hypixel":{
                hypixel(event);
                break;
            }
            case "BlocksMC":{
                if(mc.thePlayer == null || mc.theWorld == null || mc.thePlayer.ticksExisted < 1) return;
                // ping spoof
                // Blink
                int maxTick = Integer.MAX_VALUE; // Integer.MAX_VALUE for infinite blink
                int tickDelay = 2;
                if(event instanceof EventUpdate){
                    if(tick % tickDelay == 0){
                        packetBuffer.forEach(PacketUtil::packetNoEvent);
                        packetBuffer.clear();
                    }
                    tick++;
                }
                if(event instanceof EventSendPacket){
                    EventSendPacket eventSendPacket = (EventSendPacket) event;
                    if(!(eventSendPacket.getPacket() instanceof C00Handshake && eventSendPacket.getPacket() instanceof C00PacketServerQuery
                    && eventSendPacket.getPacket() instanceof C01PacketPing) && tick >= 0 && tick < maxTick){
                        packetBuffer.add(eventSendPacket.getPacket());
                        eventSendPacket.setCancelled(true);
                    }
                    /*if(mc.thePlayer.getItemInUseCount() > 0){
                        pingSpoofPackets.put(eventSendPacket.getPacket(), System.currentTimeMillis());
                        consumeTick++;
                        if(consumeTick % 3 == 0){
                            Iterator<Map.Entry<Packet, Long>> iterator = pingSpoofPackets.entrySet().iterator();
                            while (iterator.hasNext()) {
                                Map.Entry<Packet, Long> entry = iterator.next();
                                Packet p = entry.getKey();
                                long l = Math.abs(entry.getValue() - System.currentTimeMillis());
                                if (l > 200) {
                                    PacketUtil.sendSilentPacket(p);
                                    iterator.remove();
                                }
                            }
                        }
                    } */

                    if(eventSendPacket.getPacket() instanceof C02PacketUseEntity){
                        C02PacketUseEntity c02 = new C02PacketUseEntity();

                    }
                }

                break;
            }
            case "Karhu":{
                if(mc.thePlayer == null || mc.theWorld == null) return;

                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    if(e.getPacket() instanceof C0CPacketInput){
                        C0CPacketInput packet = (C0CPacketInput) e.getPacket();
                        packet.strafeSpeed = 0;
                    }
                    if(e.getPacket() instanceof C0BPacketEntityAction){
                        C0BPacketEntityAction packet = (C0BPacketEntityAction) e.getPacket();
                        if(packet.getAction() == C0BPacketEntityAction.Action.START_SNEAKING){
                            e.setCancelled(true);
                        }
                    }
                    if(e.getPacket() instanceof C08PacketPlayerBlockPlacement){
                        PacketUtil.sendSilentPacket(new C03PacketPlayer.C06PacketPlayerPosLook(
                                mc.thePlayer.posX,mc.thePlayer.posY, mc.thePlayer.posZ,
                                Float.NaN, mc.thePlayer.rotationPitch, mc.thePlayer.onGround
                        ));
                    }
                }

                break;
            }
            case "StelAC FlyB":{
                if(mc.thePlayer == null || mc.theWorld == null || mc.currentScreen instanceof GuiInventory) return;

                if(event instanceof EventUpdate){

                    if(mc.thePlayer.ticksExisted % 3 == 0){

                        mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(0, 0, 0), 1, mc.thePlayer.getItemInUse(), EnumFacing.UP.getFrontOffsetX(), EnumFacing.UP.getFrontOffsetY(), EnumFacing.UP.getFrontOffsetZ()));
                    }
                    //PacketUtil.packetNoEvent(new C01PacketPing(-1));
                    if(mc.thePlayer.ticksExisted % 2 == 0){
                        PacketUtil.packetNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(0, -1, 0), EnumFacing.UP));
                    }
                }

                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof C03PacketPlayer.C06PacketPlayerPosLook){
                        event.setCancelled(true);
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));
                        mc.thePlayer.addVelocity(0, 1, 0);
                        mc.thePlayer.addVelocity(0, -1, 0);
                    }
                    if(packet instanceof C0CPacketInput){
                        C0CPacketInput pac = (C0CPacketInput) packet;
                        pac.strafeSpeed = 10f;
                        pac.forwardSpeed = 10f;
                        pac.jumping = true;
                    }

                }
                break;
            }
            case "Dev":{
                if(mc.thePlayer == null || mc.theWorld == null) return;

                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof C0CPacketInput){
                        C0CPacketInput s = (C0CPacketInput) packet;

                    }
                }
                if(event instanceof EventReceivePacket){

                }
                if(event instanceof EventUpdate){
                    //mc.thePlayer.isDead = true;
                    mc.timer.timerSpeed = 1f;
                    //mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity());
                    //EntityBoat boat = (EntityBoat) WorldUtil.spawnBoatAndInteract();
                    //if(mc.thePlayer.ticksExisted % 50 == 0 && !Objects.isNull(boat)){
                    //    PacketUtil.packetNoEvent(new C02PacketUseEntity(boat, C02PacketUseEntity.Action.INTERACT));
                        //PacketUtil.packetNoEvent(new C02PacketUseEntity(boat, boat.getLookVec().add(mc.thePlayer.getLookVec())));
                    //}



                }
                if(event instanceof EventMotion){
                    EventMotion e = (EventMotion) event;
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();

                }


                break;
            }
        }
    }
    int offGroundTicks = 0, onGroundTicks = 0;
    int stuckTicks;
    private void hypixel(Event event) {
        // motion disabler
        if(event instanceof EventUpdate){
            stuckTicks += 1;
            if(mc.thePlayer.onGround){
                onGroundTicks += 1;
                offGroundTicks = 0;
            }else{
                offGroundTicks += 1;
                onGroundTicks = 0;
            }
            if(!mc.thePlayer.onGround && stuckTicks < 20 * 5){
                mc.thePlayer.motionX = 0;
                mc.thePlayer.motionY = 0;
                mc.thePlayer.motionZ = 0;
                MoveUtils.cancelMoveInputs();
            }
            if(stuckTicks == 100){
                Wrapper.instance.log("You can go");
            }
        }
        if(event instanceof EventSendPacket){

        }
        if(event instanceof EventReceivePacket){
            EventReceivePacket e = (EventReceivePacket) event;
            if(e.getPacket() instanceof S07PacketRespawn || e.getPacket() instanceof S01PacketJoinGame){
                Wrapper.instance.log("Wait 5 seconds");
                stuckTicks = 0;
            }
            if(e.getPacket() instanceof S12PacketEntityVelocity && stuckTicks < 20 * 5){
                Wrapper.instance.log("Disabler interrupted");
            }
        }
    }

    private static class TimestampedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public TimestampedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }


}
