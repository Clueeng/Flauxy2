package uwu.noctura.module.impl.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import uwu.noctura.event.Event;
import uwu.noctura.event.impl.EventSendPacket;
import uwu.noctura.event.impl.EventUpdate;
import uwu.noctura.module.Category;
import uwu.noctura.module.Module;
import uwu.noctura.module.ModuleInfo;
import uwu.noctura.module.setting.impl.NumberSetting;
import uwu.noctura.utils.PacketUtil;
import uwu.noctura.utils.Wrapper;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;

@ModuleInfo(name = "PingSpoof", displayName = "Ping Spoof", key = -1, cat = Category.Exploit)
public class Pingspoof extends Module {

    LinkedList<Packet> packetQueue = new LinkedList<>();
    HashMap<Packet, Long> pingQueue = new HashMap<>();

    NumberSetting delay = new NumberSetting("Delay", 400, 100, 2500, 100);

    public Pingspoof(){
        addSettings(delay);
    }

    @Override
    public void onEnable() {
        pingQueue.clear();
    }

    @Override
    public void onEvent(Event e) {
        if(e instanceof EventSendPacket){
            EventSendPacket event = (EventSendPacket) e;
            if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive){
                pingQueue.put(event.getPacket(), System.currentTimeMillis());
                event.setCancelled(true);
            }

        }
        if(e instanceof EventUpdate){
            Iterator<Map.Entry<Packet, Long>> iterator = pingQueue.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry<Packet, Long> entry = iterator.next();
                Packet p = entry.getKey();
                long l = Math.abs(entry.getValue() - System.currentTimeMillis());
                if (l > delay.getValue()) {
                    PacketUtil.sendSilentPacket(p);
                    iterator.remove();
                }
            }
        }
    }
}
